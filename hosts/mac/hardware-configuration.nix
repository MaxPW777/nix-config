# Do not modify this file!  It was generated by ‘nixos-generate-config’
# and may be overwritten by future invocations.  Please make changes
# to /etc/nixos/configuration.nix instead.
{
  config,
  lib,
  pkgs,
  modulesPath,
  ...
}: {
  imports = [];

  boot.initrd.availableKernelModules = [
    "ehci_pci" "ahci" "xhci_pci" "nvme" "usbhid" "sr_mod"
    # VMware Fusion specific modules
    "vmw_pvscsi" "vmw_vmci" "vmw_balloon" "vmwgfx" "vmw_vsock_vmci_transport"
    "virtio_pci" "virtio_blk" "virtio_scsi" "virtio_net"
  ];
  boot.initrd.kernelModules = ["vmw_pvscsi"];
  boot.kernelModules = [
    "vmw_vmci" "vmw_balloon" "vmwgfx" "vmw_vsock_vmci_transport"
    "kvm-arm64"  # ARM64 virtualization support
  ];
  boot.extraModulePackages = [];

  fileSystems."/" = {
    device = "/dev/disk/by-uuid/0c4a5b62-043f-45bb-abc3-63feb69171d4";
    fsType = "ext4";
  };

  fileSystems."/boot" = {
    device = "/dev/disk/by-uuid/6FCC-62E5";
    fsType = "vfat";
    options = ["fmask=0077" "dmask=0077"];
  };

  swapDevices = [
    {device = "/dev/disk/by-uuid/5bbccf23-61d7-49d2-bfa5-cd047f398b06";}
  ];

  # Enables DHCP on each ethernet and wireless interface. In case of scripted networking
  # (the default) this is the recommended approach. When using systemd-networkd it's
  # still possible to use this option, but it's recommended to use it in conjunction
  # with explicit per-interface declarations with `networking.interfaces.<interface>.useDHCP`.
  networking.useDHCP = lib.mkDefault true;
  # networking.interfaces.ens160.useDHCP = lib.mkDefault true;

  nixpkgs.hostPlatform = lib.mkDefault "aarch64-linux";
}
